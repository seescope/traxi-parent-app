buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
      // The Fabric Gradle plugin uses an open ended version to react
      // quickly to Android tooling updates
      classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: "com.android.application"
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

import com.android.build.OutputFile

/**
 * The react.gradle file registers two tasks: bundleDebugJsAndAssets and bundleReleaseJsAndAssets.
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create three separate APKs instead of one:
 *   - A universal APK that works on all devices
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.2"

    lintOptions {
      checkReleaseBuilds false
    }

    defaultConfig {
      vectorDrawables.useSupportLibrary = true
      applicationId "com.traxi"
      minSdkVersion 16
      targetSdkVersion 22
      versionCode 542
      versionName "5.4.2"
      ndk {
        abiFilters "armeabi-v7a", "x86"
      }
      multiDexEnabled true
      manifestPlaceholders = [onesignal_app_id: "d5fdb2cf-81c7-4dca-a33b-70dd9ab9fa35",
                              onesignal_google_project_number: "204102393429"]
}
    }

    signingConfigs {
      release {
        storeFile file(TRAXI_RELEASE_STORE_FILE)
        storePassword TRAXI_RELEASE_STORE_PASSWORD
        keyAlias TRAXI_RELEASE_KEY_ALIAS
        keyPassword TRAXI_RELEASE_STORE_PASSWORD
      }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "x86"
        }
    }

    sourceSets {
      main {
        jniLibs {
          srcDirs = ['src/main/libs']
        }
      }
    }

    buildTypes {
        debug {
            buildConfigField "String", "CODEPUSH_KEY", '"5ydThs2U5GHDHLEimIYYvxW5FjBlEyk1LPYVz"'
        }

        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            buildConfigField "String", "CODEPUSH_KEY", '"anFHshvOCqvFTMv5eZbt2Ma4o7NOEyk1LPYVz"'
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    dexOptions {
      jumboMode = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

dependencies {
    compile project(':react-native-onesignal')
    compile project(':aws-sdk-react-native-sns')
    compile project(':react-native-i18n')
    compile project(':react-native-sms-android')
    compile project(':react-native-intercom')
    compile project(':react-native-billing')
    compile project(':react-native-analytics')
    compile project(':react-native-code-push')
    compile project(':aws-sdk-react-native-core')
    compile project(':aws-sdk-react-native-dynamodb')
    compile project(':react-native-fabric')
    compile project(':react-native-randombytes')
    compile project(':react-native-image-picker')
    compile project(':react-native-svg')
    compile project(':react-native-material-kit')
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile project(':react-native-contacts')
    compile project(':react-native-vector-icons')
    compile project(':react-native-linear-gradient')

    // Multidex
    compile 'com.android.support:multidex:1.0.1'

    // Google Authentication
    compile 'com.google.android.gms:play-services-auth:10.0.1'
    compile 'com.google.android.gms:play-services-gcm:10.0.1'

    // React Native
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules

    // Mixpanel
    compile 'com.segment.analytics.android.integrations:mixpanel:+'
    compile 'com.segment.analytics.android.integrations:google-analytics:+'
    compile 'com.mixpanel.android:mixpanel-android:4.+'

    // Facebook
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'

    // Firebase
    compile 'com.google.firebase:firebase-core:10.0.1'
    compile 'com.google.firebase:firebase-database:10.0.1'
    compile 'com.google.firebase:firebase-messaging:10.0.1'
    compile 'com.google.firebase:firebase-auth:10.0.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.4@aar') {
      transitive = true;
    }

    // Intercom Push
    compile('io.intercom.android:intercom-sdk-fcm:3.+') {
      exclude group: 'io.intercom.android', module: 'intercom-sdk-base'
    }
}


// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

// Firebase
apply plugin: 'com.google.gms.google-services'
